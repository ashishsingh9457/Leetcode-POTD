//-------------Brute Force O(n^2)-----------------//
class Solution {
public:
    vector<int> xorQueries(vector<int>& arr, vector<vector<int>>& queries) 
    {
        //Brute Force
        vector<int> ans;
        for(int i=0;i<queries.size();i++)
        {
                int temp=0;
                for(int k=queries[i][0];k<=queries[i][1];k++)
                {
                    temp=temp^arr[k];
                }
                ans.push_back(temp);
        }
        return ans;
    }
};



//--------------Optimized approach O(nlog(n))-----------//
class Solution {
public:
    vector<int> xorQueries(vector<int>& arr, vector<vector<int>>& queries) 
    {
        vector<int> prefix_xor;
        int temp=0;
        for(int i=0;i<arr.size();i++)
        {
            temp=temp^arr[i];
            prefix_xor.push_back(temp);
        }

        vector<int> ans;
        for(int i=0;i<queries.size();i++)
        {
            if(queries[i][0]>0)
                ans.push_back(prefix_xor[queries[i][1]]^prefix_xor[queries[i][0]-1]);
            else
                ans.push_back(prefix_xor[queries[i][1]]);
        }
        return ans;
    }
};